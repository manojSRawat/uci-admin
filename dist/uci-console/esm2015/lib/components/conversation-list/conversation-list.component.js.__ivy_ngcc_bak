import { __decorate } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { UciService } from '../../services/uci.service';
import { Router } from '@angular/router';
import { GlobalService } from '../../services/global.service';
import { Helper } from '../../utils/helper';
let ConversationListComponent = class ConversationListComponent {
    constructor(uciService, router, globalService) {
        this.uciService = uciService;
        this.router = router;
        this.globalService = globalService;
        this.chatBots = [];
        this.displayedColumns = ['name', 'status', 'description', 'startingMessage', 'botUrl', 'botId', 'action'];
        this.pager = {
            pageSizeOptions: [5, 10, 25, 30],
            currentPage: 1,
            totalItems: 0,
            pageSize: 10
        };
        this.column = '';
        this.sortDirection = '';
        this.reverse = false;
    }
    ngOnInit() {
        this.user = this.globalService.getUser();
        if (!this.user) {
            this.router.navigate(['uci-admin']);
            return;
        }
        this.resourceService = this.globalService.getResourceService();
        this.getAllChatBots();
    }
    getAllChatBots() {
        const param = {
            page: this.pager.currentPage,
            perPage: this.pager.pageSize
        };
        if (this.search) {
            param.name = this.search;
        }
        this.uciService.searchConversation(param).subscribe(data => this.parseConversations(data));
    }
    parseConversations(data) {
        this.chatBots = [];
        data.data.forEach(bot => {
            const obj = Object.assign(Object.assign({}, bot), { segmentText: '', userCount: 0, status: bot.status || 'Draft' });
            obj.status = bot.status === 'enabled' ? 'Live' : bot.status === 'disabled' ? 'Disabled' : 'Draft';
            const segmentNames = [];
            // bot.userSegments.forEach(userSegment => {
            //     segmentNames.push(userSegment.name);
            //     obj.userCount += (userSegment.count || 0);
            // });
            obj.segmentText = segmentNames.join(', ');
            obj.url = Helper.makBotUrl(bot.startingMessage || '', this.globalService.getBotPhoneNumber());
            obj.botId = bot.id || '';
            this.chatBots.push(obj);
        });
        this.pager.totalItems = data.totalCount;
    }
    sortColumns(column) {
        this.column = column;
        this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
        this.reverse = !this.reverse;
    }
    navigateToPage(pageEvent) {
        this.pager.currentPage = pageEvent.pageIndex + 1;
        this.getAllChatBots();
    }
    getSearch() {
        this.pager.currentPage = 1;
        this.getAllChatBots();
    }
    onAddNew() {
        this.router.navigateByUrl('uci-admin/add');
    }
    onEdit(conversation) {
        this.router.navigateByUrl(`uci-admin/${conversation.id}/edit`);
    }
    onStatusChange(conversation, index) {
        if (conversation.status === 'Live') {
            this.uciService.pauseConversation(conversation.id).subscribe(data => {
                this.chatBots[index].status = 'Disabled';
                this.updateDatasource();
            });
        }
        else {
            this.uciService.startConversation(conversation.id).subscribe(data => {
                this.chatBots[index].status = 'Live';
                this.updateDatasource();
            });
        }
    }
    onDelete(conversation, index) {
        this.uciService.deleteConversation(conversation.id).subscribe(data => {
            this.chatBots.splice(index, 1);
            this.updateDatasource();
        });
    }
    onCopy(id) {
        Helper.copyData(id);
    }
    updateDatasource() {
        this.botTable.renderRows();
    }
    onReport(conversation, i) {
        this.router.navigateByUrl(`uci-admin/${conversation.id}/reports`);
    }
};
ConversationListComponent.ctorParameters = () => [
    { type: UciService },
    { type: Router },
    { type: GlobalService }
];
__decorate([
    ViewChild('botTable')
], ConversationListComponent.prototype, "botTable", void 0);
ConversationListComponent = __decorate([
    Component({
        selector: 'lib-conversation-list',
        template: "<div class=\"uci-container\">\n    <mat-grid-list cols=\"2\" rowHeight=\"4rem\">\n        <mat-grid-tile colspan=\"1\">\n            <div class=\"w-100 text-left\">\n                <mat-form-field>\n                    <input matInput type=\"text\" [(ngModel)]=\"search\"\n                           [placeholder]=\"resourceService.frmelmnts?.btn?.search\"\n                           (keyup.enter)=\"getSearch()\">\n                    <button mat-button matSuffix mat-stroked-button aria-label=\"search\"\n                            class=\"uci-action-button computer only\" (click)=\"getSearch()\">\n<!--                        <mat-icon>search</mat-icon>-->\n                        {{resourceService.frmelmnts?.btn?.search}}\n                    </button>\n                </mat-form-field>\n            </div>\n        </mat-grid-tile>\n        <mat-grid-tile colspan=\"1\">\n            <div class=\"pb-10 text-right w-100\">\n                <div class=\"right-floated pt-0\">\n                    <button mat-raised-button class=\"uci-action-button\"\n                            (click)=\"onAddNew()\"> {{resourceService.frmelmnts?.btn?.addNew}} </button>\n                </div>\n            </div>\n        </mat-grid-tile>\n    </mat-grid-list>\n\n    <mat-grid-list cols=\"1\">\n        <table mat-table class=\"computer only\" [dataSource]=\"chatBots\" #botTable>\n            <ng-container matColumnDef=\"name\">\n                <th mat-header-cell *matHeaderCellDef> {{resourceService.frmelmnts?.lbl?.name}}</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n            </ng-container>\n            <ng-container matColumnDef=\"status\">\n                <th mat-header-cell *matHeaderCellDef> {{resourceService.frmelmnts?.lbl?.status}} </th>\n                <td mat-cell *matCellDef=\"let element\"\n                    [ngClass]=\"'status-' + (element.status ? element.status.toLowerCase(): '')\"> {{element.status}} </td>\n            </ng-container>\n            <ng-container matColumnDef=\"description\">\n                <th mat-header-cell *matHeaderCellDef> {{resourceService.frmelmnts?.lbl?.description}}</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\n            </ng-container>\n            <ng-container matColumnDef=\"startingMessage\">\n                <th mat-header-cell *matHeaderCellDef> {{resourceService.frmelmnts?.lbl?.startingMessage}} </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.startingMessage}} </td>\n            </ng-container>\n            <ng-container matColumnDef=\"botUrl\">\n                <th mat-header-cell *matHeaderCellDef> {{resourceService.frmelmnts?.lbl?.botUrl}} </th>\n                <td mat-cell *matCellDef=\"let element; let i = index\">\n                    <span class=\"hide\" [id]=\"'copyUrl-' + i\">{{element.url}}</span>\n                    <button mat-raised-button class=\"uci-copy-button\"\n                            (click)=\"onCopy('copyUrl-' + i)\">\n                        {{resourceService.frmelmnts?.btn?.copy}}\n                    </button>\n                </td>\n            </ng-container>\n            <ng-container matColumnDef=\"botId\">\n                <th mat-header-cell *matHeaderCellDef> {{resourceService.frmelmnts?.lbl?.botId}}</th>\n                <td mat-cell *matCellDef=\"let element; let i = index\">\n                    <span class=\"hide\" [id]=\"'copyId-' + i\">{{element.id}}</span>\n                    <button mat-raised-button class=\"uci-copy-button\"\n                            (click)=\"onCopy('copyId-' + i)\">\n                        {{resourceService.frmelmnts?.btn?.copy}}\n                    </button>\n                </td>\n            </ng-container>\n            <ng-container matColumnDef=\"action\">\n                <th mat-header-cell *matHeaderCellDef> {{resourceService.frmelmnts?.lbl?.action}}</th>\n                <td mat-cell *matCellDef=\"let element; let i = index\" class=\"center aligned\">\n                    <button mat-button [matMenuTriggerFor]=\"menu\">\n                        <mat-icon>more_vert</mat-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\" class=\"uci-list-menu\">\n                        <button mat-menu-item (click)=\"onEdit(element)\">{{resourceService.frmelmnts?.lbl?.edit}} </button>\n                        <button mat-menu-item (click)=\"onDelete(element, i)\">{{resourceService.frmelmnts?.lbl?.delete}} </button>\n                        <button mat-menu-item (click)=\"onStatusChange(element, i)\">\n                            {{element.status === 'Live' ? resourceService.frmelmnts?.lbl?.disable : resourceService.frmelmnts?.lbl?.enable}}\n                        </button>\n                        <button mat-menu-item (click)=\"onReport(element, i)\">\n                            {{resourceService.frmelmnts?.lbl?.report}}\n                        </button>\n                    </mat-menu>\n                </td>\n            </ng-container>\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n\n        <div class=\"mobile only\">\n            <div *ngFor=\"let chatBot of chatBots; let i = index\" class=\"mb-5\">\n                <mat-card>\n                    <mat-card-content>\n                        <mat-grid-list cols=\"4\" rowHeight=\"35\">\n                            <mat-grid-tile colspan=\"1\">\n                                <div class=\"w-100 text-left\">{{resourceService.frmelmnts?.lbl?.name}}</div>\n                            </mat-grid-tile>\n                            <mat-grid-tile colspan=\"3\" class=\"overflow-visible\">\n                                <div class=\"w-100 d-flex justify-between align-middle\">\n                                    <h5>{{chatBot.name}}</h5>\n                                    <button mat-button [matMenuTriggerFor]=\"menuMobile\">\n                                        <mat-icon>more_vert</mat-icon>\n                                    </button>\n                                    <mat-menu #menuMobile=\"matMenu\" class=\"uci-list-menu\">\n                                        <button mat-menu-item (click)=\"onEdit(chatBot)\">{{resourceService.frmelmnts?.lbl?.edit}} </button>\n                                        <button mat-menu-item (click)=\"onDelete(chatBot, i)\">{{resourceService.frmelmnts?.lbl?.delete}} </button>\n                                        <button mat-menu-item (click)=\"onStatusChange(chatBot, i)\">\n                                            {{chatBot.status === 'Live' ? resourceService.frmelmnts?.lbl?.disable : resourceService.frmelmnts?.lbl?.enable}}\n                                        </button>\n                                        <button mat-menu-item (click)=\"onReport(chatBot, i)\">\n                                            {{resourceService.frmelmnts?.lbl?.report}}\n                                        </button>\n                                    </mat-menu>\n                                </div>\n                            </mat-grid-tile>\n                            <mat-grid-tile colspan=\"1\">\n                                <div class=\"w-100 text-left\">{{resourceService.frmelmnts?.lbl?.description}}</div>\n                            </mat-grid-tile>\n                            <mat-grid-tile colspan=\"3\">\n                                <div class=\"w-100 text-left\">\n                                    {{chatBot.description}}\n                                </div>\n                            </mat-grid-tile>\n                            <mat-grid-tile colspan=\"1\">\n                                <div class=\"w-100 text-left\">{{resourceService.frmelmnts?.lbl?.startingMessage}}</div>\n                            </mat-grid-tile>\n                            <mat-grid-tile colspan=\"3\">\n                                <div class=\"w-100 d-flex justify-between align-middle\">\n                                    <span>{{chatBot.startingMessage}}</span>\n                                    <span>\n                                        <button mat-flat-button class=\"small-btn\"\n                                                [ngClass]=\"'status-' + (chatBot.status ? chatBot.status.toLowerCase(): '')\">\n                                            {{chatBot.status}}\n                                        </button>\n                                    </span>\n                                </div>\n                            </mat-grid-tile>\n                        </mat-grid-list>\n                    </mat-card-content>\n                </mat-card>\n            </div>\n        </div>\n        <div class=\"uci-mat-pagination\">\n            <mat-paginator [length]=\"pager.totalItems\"\n                           [pageSize]=\"pager.pageSize\"\n                           [pageIndex]=\"pager.currentPage - 1\"\n                           [pageSizeOptions]=\"pager.pageSizeOptions\"\n                           (page)=\"navigateToPage($event)\">\n            </mat-paginator>\n        </div>\n    </mat-grid-list>\n</div>\n",
        styles: ["@import url(https://fonts.googleapis.com/css?family=Material+Icons);.uci-container ::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline{background-color:#fff;border-radius:5px}.mat-table{width:100%}.mat-header-cell{font-weight:700;color:#000}.uci-action-button{background-color:#005a9e;color:#fff}.uci-copy-button{background-color:#e0e1e2;color:#000}.hide{display:none}.asterisk-color{color:red}.uci-mat-pagination{text-align:right}.small-btn{padding:6px 14px;font-size:12px;line-height:1;min-width:auto}.w-100{width:100%}.justify-between{justify-content:space-between}.align-middle{align-items:center}.overflow-visible{overflow:visible!important}.background-transparent{background:0 0!important}.wrap-text{word-wrap:break-word}.col-3{flex-grow:3}.col-1{flex-grow:1}.d-flex{display:flex}.flex-row{flex-flow:row!important}.flex-column{flex-flow:column!important}.justify-content-center{justify-content:center!important}.justify-content-start{justify-content:start!important}.justify-content-end{justify-content:end!important}.justify-content-around{justify-content:space-around!important}.justify-content-between{justify-content:space-between!important}.align-items-center{align-items:center!important}.align-items-start{align-items:start!important}.align-items-baseline{align-items:baseline!important}.align-items-end{align-items:end!important}.text-center{text-align:center!important}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-right .margin-auto{margin:auto!important}::ng-deep .mat-select-panel-wrap{flex-basis:auto}.mat-column-action{width:5px}.uci-list-menu{background:red}.uci-container ::ng-deep .cdk-overlay-pane{width:auto}.ellipsis-icon{font-size:1.2rem}.status-live{color:#3c763d}.status-draft{color:#ffb300}.status-disabled{color:#ff4a2f}.mobile .status-draft{font-weight:900;background-color:rgba(241,210,140,.69)}.mobile .status-disabled{font-weight:900;background-color:rgba(229,135,126,.63)}.mobile .status-live{font-weight:900;background-color:rgba(120,206,122,.58)}.action-dropdown{top:2px;left:-56px;z-index:2;position:absolute}.action-dropdown .item{cursor:pointer}.action-dropdown .item:hover{background-color:#f6f6f6}"]
    })
], ConversationListComponent);
export { ConversationListComponent };
//# sourceMappingURL=data:application/json;base64,