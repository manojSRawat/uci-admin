import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BaseService } from './base.service';
import { GlobalService } from './global.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./global.service";
let UciService = class UciService extends BaseService {
    constructor(http, globalService) {
        super(http, globalService);
        this.http = http;
        this.globalService = globalService;
        this.FORM_BASE_URL = 'https://dev.sunbirded.org/';
        this.globalService.baseUrl$.subscribe(value => {
            if (value) {
                this.BASE_URL = value + '/admin/';
                this.BASE_URL_V1 = value + '/admin/v1/';
                this.BASE_URL_V2 = value + '/admin/v2/';
                this.DATASET_URL = value.replace('/uci') + '/dataset/v1/';
            }
        });
        this.globalService.nlBaseUrl$.subscribe(value => {
            if (value) {
                this.NL_BASE_URL = value + '/';
            }
        });
    }
    fetchConversation(params) {
        return this.getRequest(this.BASE_URL + 'bot/search', params, { asset: 'bot' });
    }
    searchConversation(params) {
        return this.getRequest(this.BASE_URL + 'bot/search', params, { asset: 'bot' });
    }
    pauseConversation(botId) {
        return this.getRequest(this.BASE_URL + `bot/pause/${botId}`, {}, { asset: 'bot' });
    }
    startConversation(botId) {
        return this.getRequest(this.BASE_URL + `bot/start/${botId}`, {}, { asset: 'bot' });
    }
    deleteConversation(botId) {
        return this.getRequest(this.BASE_URL + `bot/delete/${botId}`, {}, { asset: 'bot' });
    }
    getBotDetails(id) {
        return this.getRequest(this.BASE_URL + `bot/get/${id}`, {}, { asset: 'bot' });
    }
    getCheckStartingMessage(param) {
        return this.getRequest(this.BASE_URL + `bot/getByParam`, param, { asset: 'bot' });
    }
    botCreate(data) {
        return this.postRequest(this.BASE_URL + 'bot', data, { asset: 'bot' });
    }
    botUpdate(id, data) {
        return this.postRequest(this.BASE_URL + `bot/update/${id}`, data, { asset: 'bot' });
    }
    // User Segment APIs
    fetchUserSegment(params) {
        return this.getRequest(this.BASE_URL + 'userSegment/get', params, { asset: 'userSegment' });
    }
    searchUserSegment(params) {
        return this.getRequest(this.BASE_URL + 'userSegment/search', params, { asset: 'userSegment' });
    }
    createUserSegment(data) {
        return this.postSegmentRequest(this.BASE_URL + 'user-segment', data, { asset: 'userSegment' });
    }
    userSegmentQueryBuilder(data) {
        return this.postRequest(this.BASE_URL + 'userSegment/queryBuilder', data, { asset: 'userSegment' });
    }
    // Conversation APIs
    createLogic(data) {
        return this.postRequest(this.BASE_URL + 'conversationLogic', data, { asset: 'conversationLogic' });
    }
    updateLogic(id, data) {
        return this.patchRequest(this.BASE_URL + `conversationLogic/${id}`, data, { asset: 'conversationLogic' });
    }
    deleteLogic(id) {
        return this.deleteRequest(this.BASE_URL + `conversationLogic/${id}`, { asset: 'conversationLogic' });
    }
    // Mis APIs
    uploadFile(obj) {
        return this.postRequest(this.BASE_URL + 'form/upload', this.toFormData(obj));
    }
    readForm(data) {
        return this.postRequest(this.FORM_BASE_URL + 'api/data/v1/form/read', data);
    }
    // Exhaust API
    getJobList(id, params) {
        return this.getRequest(this.DATASET_URL + `request/list/${id}`, params, { asset: 'conversationLogic' });
    }
    getJobInfo(id, params) {
        return this.getRequest(this.DATASET_URL + `request/read/${id}`, params, { asset: 'conversationLogic' });
    }
    submitExhaust(data) {
        return this.postRequest(this.DATASET_URL + `request/submit`, data, { asset: 'conversationLogic' });
    }
    nlSegmentBotMapping(data) {
        return this.postRequest(this.NL_BASE_URL + `segment-bot-mapping`, data);
    }
    submitSegmentData(data) {
        return this.postRequest(this.NL_BASE_URL + `segment-bot-mapping`, data);
    }
};
UciService.ctorParameters = () => [
    { type: HttpClient },
    { type: GlobalService }
];
UciService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UciService_Factory() { return new UciService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.GlobalService)); }, token: UciService, providedIn: "root" });
UciService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], UciService);
export { UciService };
//# sourceMappingURL=data:application/json;base64,