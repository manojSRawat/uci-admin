import { __decorate } from "tslib";
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { catchError, map } from 'rxjs/operators';
import { GlobalService } from './global.service';
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./global.service";
let BaseService = class BaseService {
    constructor(http, globalService) {
        this.http = http;
        this.globalService = globalService;
    }
    getDefaultHeaders() {
        const headers = {};
        const user = this.globalService.getUser();
        if (user && user.id) {
            headers.ownerID = user.id;
        }
        if (user && user.rootOrgId) {
            headers.ownerOrgID = user.rootOrgId;
        }
        if (user.token) {
            headers['admin-token'] = user.token;
        }
        return headers;
    }
    getRequest(url, params = {}, headers = {}) {
        headers = Object.assign(Object.assign({}, headers), this.getDefaultHeaders());
        return this.http.get(url, { params, headers }).pipe(map((res) => {
            return res.result;
        }), catchError(err => {
            return this.handleError(err);
        }));
    }
    postRequest(url, data = {}, headers = {}) {
        headers = Object.assign(Object.assign({}, headers), this.getDefaultHeaders());
        return this.http.post(url, data, { headers }).pipe(map((res) => {
            return res.result;
        }), catchError(err => {
            return this.handleError(err);
        }));
    }
    postSegmentRequest(url, data = {}, headers = {}) {
        headers = Object.assign(Object.assign({}, headers), this.getDefaultHeaders());
        return this.http.post(url, data, { headers }).pipe(map((res) => {
            return res.result ? res.result : res;
        }), catchError(err => {
            return this.handleError(err);
        }));
    }
    patchRequest(url, data = {}, headers = {}) {
        headers = Object.assign(Object.assign({}, headers), this.getDefaultHeaders());
        return this.http.patch(url, data, { headers }).pipe(map((res) => {
            return res.result;
        }), catchError(err => {
            return this.handleError(err);
        }));
    }
    deleteRequest(url, headers = {}) {
        headers = Object.assign(Object.assign({}, headers), this.getDefaultHeaders());
        return this.http.delete(url, { headers }).pipe(map((res) => {
            return res.result;
        }), catchError(err => {
            return this.handleError(err);
        }));
    }
    handleError(error) {
        if (error instanceof ErrorEvent) {
            return throwError(error.error.message);
        }
        console.log('=====', error, error.error);
        // this.toasterService.error(this.resourceService.messages.fmsg.m0091);
        return throwError(error.error);
    }
    toFormData(formValue) {
        const formData = new FormData();
        for (const key of Object.keys(formValue)) {
            const value = formValue[key];
            formData.append(key, value);
        }
        return formData;
    }
};
BaseService.ctorParameters = () => [
    { type: HttpClient },
    { type: GlobalService }
];
BaseService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseService_Factory() { return new BaseService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.GlobalService)); }, token: BaseService, providedIn: "root" });
BaseService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], BaseService);
export { BaseService };
//# sourceMappingURL=data:application/json;base64,