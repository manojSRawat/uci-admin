import { __decorate } from "tslib";
import { UciEventsService } from './uci-events.service';
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
/* tslint:disable */
import * as _ from 'lodash';
import * as i0 from "@angular/core";
import * as i1 from "./uci-events.service";
import * as i2 from "@angular/router";
let TelemetryUtilsService = class TelemetryUtilsService {
    constructor(discussionEvents, router) {
        this.discussionEvents = discussionEvents;
        this.router = router;
        this._context = [];
        this.currentObj = {};
    }
    setContext(context) {
        this._context = context;
        this.currentObj = _.last(context);
    }
    uppendContext(data) {
        const matchedC = _.find(this._context, { id: data.id });
        if (!_.isEmpty(data) && !_.isEqual(data, matchedC)) {
            this._context.push(data);
        }
        this.currentObj = _.last(this._context);
    }
    deleteContext(prevTopic) {
        const topic = _.find(this._context, prevTopic);
        if (topic) {
            this._context = _.reject(this._context, topic);
        }
    }
    getContext() {
        return this._context;
    }
    logImpression(pageId) {
        this.discussionEvents.emitTelemetry({});
        const impressionEvent = {
            eid: 'IMPRESSION',
            edata: {
                type: 'view',
                pageid: pageId,
                uri: this.router.url
            }
        };
        if (this.currentObj) {
            impressionEvent.context = { cdata: [{
                        id: _.get(this.currentObj, 'id').toString(),
                        type: _.get(this.currentObj, 'type')
                    }
                ] };
        }
        this.discussionEvents.emitTelemetry(impressionEvent);
    }
    logInteract(event, pageId) {
        const target = _.get(event, 'currentTarget.attributes.id') || _.get(event, 'target.attributes.id') ||
            _.get(event, 'srcElement.attributes.id');
        const interactEvent = {
            eid: 'INTERACT',
            edata: {
                id: _.get(target, 'value') || _.get(event, 'action'),
                type: 'CLICK',
                pageid: pageId
            }
        };
        if (this.currentObj) {
            const object = {
                id: _.get(this.currentObj, 'id').toString(),
                type: _.get(this.currentObj, 'type'),
                ver: '1'
            };
            object['rollup'] = this._context.length > 1 ? this.getRollUp() : {};
            interactEvent.context = {
                cdata: [{
                        id: _.get(this.currentObj, 'id').toString(),
                        type: _.get(this.currentObj, 'type')
                    }], object
            };
        }
        this.discussionEvents.emitTelemetry(interactEvent);
    }
    getRollUp() {
        const rollUp = {};
        const data = _.reject(this._context, this.currentObj);
        if (this._context.length > 1) {
            data.forEach((element, index) => {
                // console.log('rollup', element);
                rollUp['l' + (index + 1)] = element.toString();
            });
        }
        if (_.get(this.currentObj, 'type') !== 'Post') {
            return rollUp;
        }
        return {};
    }
};
TelemetryUtilsService.ctorParameters = () => [
    { type: UciEventsService },
    { type: Router }
];
TelemetryUtilsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TelemetryUtilsService_Factory() { return new TelemetryUtilsService(i0.ɵɵinject(i1.UciEventsService), i0.ɵɵinject(i2.Router)); }, token: TelemetryUtilsService, providedIn: "root" });
TelemetryUtilsService = __decorate([
    Injectable({
        providedIn: 'root'
    })
], TelemetryUtilsService);
export { TelemetryUtilsService };
//# sourceMappingURL=data:application/json;base64,