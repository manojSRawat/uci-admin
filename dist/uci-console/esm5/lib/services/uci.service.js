import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BaseService } from './base.service';
import { GlobalService } from './global.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./global.service";
var UciService = /** @class */ (function (_super) {
    __extends(UciService, _super);
    function UciService(http, globalService) {
        var _this = _super.call(this, http, globalService) || this;
        _this.http = http;
        _this.globalService = globalService;
        _this.FORM_BASE_URL = 'https://dev.sunbirded.org/';
        _this.globalService.baseUrl$.subscribe(function (value) {
            if (value) {
                _this.BASE_URL = value + '/admin/';
                _this.BASE_URL_V1 = value + '/admin/v1/';
                _this.BASE_URL_V2 = value + '/admin/v2/';
                _this.DATASET_URL = value.replace('/uci') + '/dataset/v1/';
            }
        });
        _this.globalService.nlBaseUrl$.subscribe(function (value) {
            if (value) {
                _this.NL_BASE_URL = value + '/';
            }
        });
        return _this;
    }
    UciService.prototype.fetchConversation = function (params) {
        return this.getRequest(this.BASE_URL + 'bot/search', params, { asset: 'bot' });
    };
    UciService.prototype.searchConversation = function (params) {
        return this.getRequest(this.BASE_URL + 'bot/search', params, { asset: 'bot' });
    };
    UciService.prototype.pauseConversation = function (botId) {
        return this.getRequest(this.BASE_URL + ("bot/pause/" + botId), {}, { asset: 'bot' });
    };
    UciService.prototype.startConversation = function (botId) {
        return this.getRequest(this.BASE_URL + ("bot/start/" + botId), {}, { asset: 'bot' });
    };
    UciService.prototype.deleteConversation = function (botId) {
        return this.getRequest(this.BASE_URL + ("bot/delete/" + botId), {}, { asset: 'bot' });
    };
    UciService.prototype.getBotDetails = function (id) {
        return this.getRequest(this.BASE_URL + ("bot/get/" + id), {}, { asset: 'bot' });
    };
    UciService.prototype.getCheckStartingMessage = function (param) {
        return this.getRequest(this.BASE_URL + "bot/getByParam", param, { asset: 'bot' });
    };
    UciService.prototype.botCreate = function (data) {
        return this.postRequest(this.BASE_URL + 'bot', data, { asset: 'bot' });
    };
    UciService.prototype.botUpdate = function (id, data) {
        return this.postRequest(this.BASE_URL + ("bot/update/" + id), data, { asset: 'bot' });
    };
    // User Segment APIs
    UciService.prototype.fetchUserSegment = function (params) {
        return this.getRequest(this.BASE_URL + 'userSegment/get', params, { asset: 'userSegment' });
    };
    UciService.prototype.searchUserSegment = function (params) {
        return this.getRequest(this.BASE_URL + 'userSegment/search', params, { asset: 'userSegment' });
    };
    UciService.prototype.createUserSegment = function (data) {
        return this.postSegmentRequest(this.BASE_URL + 'user-segment', data, { asset: 'userSegment' });
    };
    UciService.prototype.userSegmentQueryBuilder = function (data) {
        return this.postRequest(this.BASE_URL + 'userSegment/queryBuilder', data, { asset: 'userSegment' });
    };
    // Conversation APIs
    UciService.prototype.createLogic = function (data) {
        return this.postRequest(this.BASE_URL + 'conversationLogic', data, { asset: 'conversationLogic' });
    };
    UciService.prototype.updateLogic = function (id, data) {
        return this.patchRequest(this.BASE_URL + ("conversationLogic/" + id), data, { asset: 'conversationLogic' });
    };
    UciService.prototype.deleteLogic = function (id) {
        return this.deleteRequest(this.BASE_URL + ("conversationLogic/" + id), { asset: 'conversationLogic' });
    };
    // Mis APIs
    UciService.prototype.uploadFile = function (obj) {
        return this.postRequest(this.BASE_URL + 'form/upload', this.toFormData(obj));
    };
    UciService.prototype.readForm = function (data) {
        return this.postRequest(this.FORM_BASE_URL + 'api/data/v1/form/read', data);
    };
    // Exhaust API
    UciService.prototype.getJobList = function (id, params) {
        return this.getRequest(this.DATASET_URL + ("request/list/" + id), params, { asset: 'conversationLogic' });
    };
    UciService.prototype.getJobInfo = function (id, params) {
        return this.getRequest(this.DATASET_URL + ("request/read/" + id), params, { asset: 'conversationLogic' });
    };
    UciService.prototype.submitExhaust = function (data) {
        return this.postRequest(this.DATASET_URL + "request/submit", data, { asset: 'conversationLogic' });
    };
    UciService.prototype.nlSegmentBotMapping = function (data) {
        return this.postRequest(this.NL_BASE_URL + "segment-bot-mapping", data);
    };
    UciService.prototype.submitSegmentData = function (data) {
        return this.postRequest(this.NL_BASE_URL + "segment-bot-mapping", data);
    };
    UciService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: GlobalService }
    ]; };
    UciService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UciService_Factory() { return new UciService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.GlobalService)); }, token: UciService, providedIn: "root" });
    UciService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], UciService);
    return UciService;
}(BaseService));
export { UciService };
//# sourceMappingURL=data:application/json;base64,